// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>
#include "matrix4.h"

using namespace Rcpp;

// forward_backward
NumericMatrix forward_backward(NumericMatrix logEmiss, NumericVector Dist, double a, double f);
RcppExport SEXP _Fantasio_forward_backward(SEXP logEmissSEXP, SEXP DistSEXP, SEXP aSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type logEmiss(logEmissSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Dist(DistSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_backward(logEmiss, Dist, a, f));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihood
double logLikelihood(NumericMatrix logEmiss, NumericVector Dist, double a, double f);
RcppExport SEXP _Fantasio_logLikelihood(SEXP logEmissSEXP, SEXP DistSEXP, SEXP aSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type logEmiss(logEmissSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Dist(DistSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihood(logEmiss, Dist, a, f));
    return rcpp_result_gen;
END_RCPP
}
// logLikelihood_gradient
NumericVector logLikelihood_gradient(NumericMatrix logEmiss, NumericVector Dist, double a, double f);
RcppExport SEXP _Fantasio_logLikelihood_gradient(SEXP logEmissSEXP, SEXP DistSEXP, SEXP aSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type logEmiss(logEmissSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Dist(DistSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikelihood_gradient(logEmiss, Dist, a, f));
    return rcpp_result_gen;
END_RCPP
}
// logEmiss
NumericMatrix logEmiss(NumericVector Y1, NumericVector Y2, NumericMatrix logFreq, double epsilon);
RcppExport SEXP _Fantasio_logEmiss(SEXP Y1SEXP, SEXP Y2SEXP, SEXP logFreqSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y1(Y1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y2(Y2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type logFreq(logFreqSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(logEmiss(Y1, Y2, logFreq, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// m4_logEmiss
NumericMatrix m4_logEmiss(XPtr<matrix4> p_A, NumericVector p, IntegerVector map, double epsilon);
RcppExport SEXP _Fantasio_m4_logEmiss(SEXP p_ASEXP, SEXP pSEXP, SEXP mapSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<matrix4> >::type p_A(p_ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type map(mapSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(m4_logEmiss(p_A, p, map, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// simu_geno
NumericMatrix simu_geno(NumericVector S, NumericMatrix Freq);
RcppExport SEXP _Fantasio_simu_geno(SEXP SSEXP, SEXP FreqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Freq(FreqSEXP);
    rcpp_result_gen = Rcpp::wrap(simu_geno(S, Freq));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP festim_forward_backward(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP festim_logEmiss(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP festim_logLikelihood(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP festim_logLikelihood_gradient(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP festim_m4_logEmiss(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP festim_simu0(SEXP, SEXP, SEXP);
RcppExport SEXP festim_simu_geno(SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_Fantasio_forward_backward", (DL_FUNC) &_Fantasio_forward_backward, 4},
    {"_Fantasio_logLikelihood", (DL_FUNC) &_Fantasio_logLikelihood, 4},
    {"_Fantasio_logLikelihood_gradient", (DL_FUNC) &_Fantasio_logLikelihood_gradient, 4},
    {"_Fantasio_logEmiss", (DL_FUNC) &_Fantasio_logEmiss, 4},
    {"_Fantasio_m4_logEmiss", (DL_FUNC) &_Fantasio_m4_logEmiss, 4},
    {"_Fantasio_simu_geno", (DL_FUNC) &_Fantasio_simu_geno, 2},
    {"festim_forward_backward",          (DL_FUNC) &festim_forward_backward,          4},
    {"festim_logEmiss",                  (DL_FUNC) &festim_logEmiss,                  4},
    {"festim_logLikelihood",             (DL_FUNC) &festim_logLikelihood,             4},
    {"festim_logLikelihood_gradient",    (DL_FUNC) &festim_logLikelihood_gradient,    4},
    {"festim_m4_logEmiss",               (DL_FUNC) &festim_m4_logEmiss,               4},
    {"festim_simu0",                     (DL_FUNC) &festim_simu0,                     3},
    {"festim_simu_geno",                 (DL_FUNC) &festim_simu_geno,                 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_Fantasio(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
